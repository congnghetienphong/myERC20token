// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

import "./_Context.sol";
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
 
contract Ownable is Context {
    address private owner;
    address private previousOwner;
    uint256 private unlockTime;
     
    event ownershipTransferred(address indexed previousOwner, address indexed newOwner);
     
    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() internal {
        address msgSender = _msgSender();
        owner = msgSender;
        emit ownershipTransferred(address(0), msgSender);
    }
     
    // Returns the address of the current ownershipTransferred
    function getOwner() public view returns (address) {
        return owner;
    }
    
    function getPreviousOwner() public view returns (address) {
        return previousOwner;
    }
    
    function getUnlockTime() public view returns(uint256) {
        return unlockTime;
    }
     
    // Check whether the caller is the current owner or not
    modifier onlyOwner() {
        require(_msgSender()==owner, "Ownable: caller is not the owner");
        _;
    }
     
    /**
     * @dev Leaves the contract without owner.
     * Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     */
    function renounceOwnership() public virtual onlyOwner {
        emit ownershipTransferred(owner, address(0));
        owner = address(0);
    }
     
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner!=address(0), "Ownable: new owner is the zero address");
        emit ownershipTransferred(owner, newOwner);
        owner = newOwner;
    }
    
    // Locks the contract by owner for a given lockTime
    function lockContract(uint256 lockTime) public virtual onlyOwner {
        emit ownershipTransferred(owner, address(0));
        previousOwner = owner;
        owner = address(0);
        unlockTime = block.timestamp + lockTime;
    }
    
    // Unlocks the contract by owner while lockTime is exceeds
    function unlockContract() public virtual {
        require(_msgSender()==previousOwner, "You don't have permission to unlock");
        require(block.timestamp>unlockTime, "Contract is still under locking duration");
        emit ownershipTransferred(owner, previousOwner);
        owner = previousOwner;
    }
 }
